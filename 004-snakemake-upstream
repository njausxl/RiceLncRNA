# RiceLncRNA CodingRNA database sankemake upsteam 
## 1. conda
conda create --name CodingRNA_database_pipeline python=3.7

conda activate CodingRNA_database_pipeline

conda install -c bioconda taco
## 2. Create folders
mkdir -p ~/CodingRNA_database_pipeline/
cd ~/CodingRNA_database_pipeline
mkdir -p sra
mkdir -p fastq
mkdir -p hisat2_index
mkdir -p fastqc
mkdir -p taco
mkdir -p hisat2_index

## 3. Download genome files    
wget http://rice.plantbiology.msu.edu/download/Genome_MSU_r7.tar.gz
tar -xvf Genome_MSU_r7.tar.gz
hisat2-build Genome_MSU_r7.tar.gz hisat2_index/rice7_index

## 4. snakemake
vim snakemake_coding.py


```python
## 1. Environment activation rule
onstart:
    shell("""
        source /gss1/env_os7/snakemake.env
        source /gss1/env/hisat2.env
        source /gss1/env/bowtie2.env
        source /gss1/env/fastp.env
        source /gss1/env/TrimGalore_v0.6.7.env
        source /gss1/env/samtools-1.11.env
        source /gss1/env/multiqc.env
        source /gss1/env/fastqc.env
        source /gss1/env/sratoolkit.2.10.0.env
    """)

workdir: "/gss1/home/hzhao/temp/data"
samples = ["A", "B"]

rule all:
    input:
        expand("hisat2/{sample}_sorted.bam", sample=["A","B"]),
        "multiqc_report/multiqc_report.html"



# 2. fastqc
rule fastqc:
    input:
        r1="reads/{sample}_1.fq",
        r2="reads/{sample}_2.fq"
    output:
        html1="qc/fastqc/{sample}_1_fastqc.html",
        zip1="qc/fastqc/{sample}_1_fastqc.zip",
        html2="qc/fastqc/{sample}_2_fastqc.html",
        zip2="qc/fastqc/{sample}_2_fastqc.zip"
    params:
        extra="--quiet"
    log:
        "log/fastqc/{sample}.log"
    threads: 1
    shell:
        """
        fastqc --threads {threads} {params.extra} --outdir qc/fastqc {input.r1} {input.r2}
        """



# 3. multiqc



rule multiqc:
    input:
        htmls=expand("qc/fastqc/{sample}_{reads}_fastqc.html", sample=["A", "B"], reads=["1", "2"])
    output:
        "multiqc_report/multiqc_report.html"
    log:
        "log/multiqc.log"
    run:
        from os import path
        from snakemake.shell import shell

        input_data = set(path.dirname(fp) for fp in input.htmls)
        output_dir = path.dirname(output[0])
        output_name = path.basename(output[0])
        log_file = log[0]

        shell(
            f"multiqc --force -o {output_dir} -n {output_name} {' '.join(input_data)} > {log_file} 2>&1"
        )

## 4. fastp

rule fastp:
    input:
        r1="reads/{sample}_1.fq",
        r2="reads/{sample}_2.fq"
    output:
        out1="trimmedFp/{sample}.1.fq.gz",
        out2="trimmedFp/{sample}.2.fq.gz",
        html="report/{sample}_fastp.html",
        log="log/fastp/{sample}_fastp.log",
        json="report/{sample}_fastp.json"
    threads: 1
    shell:
        """
        source /gss1/env/fastp.env
        fastp \
        --detect_adapter_for_pe \
        --in1 {input.r1} \
        --in2 {input.r2} \
        --out1 {output.out1} \
        --out2 {output.out2} \
        --html {output.html} \
        --json {output.json} \
        -w {threads} \
        -z 7 \
        -q 20 \
        -u 20 \
        -c \
        -n 4 \
        2> {output.log}
        """





## 5. trim_galore

rule trim_galore:
    input:
        r1="trimmedFp/{sample}.1.fq.gz",
        r2="trimmedFp/{sample}.2.fq.gz"
    output:
        r1="trimmedTrim/{sample}.1_val_1.fq.gz",
        r2="trimmedTrim/{sample}.2_val_2.fq.gz",
        log="log/trimgalory/{sample}.log"
    threads: 20
    params:
        outdir="trimmedTrim/"
    shell:
        """
        mkdir -p {params.outdir}
        trim_galore \
        --gzip \
        -j {threads} \
        --paired \
        -o {params.outdir} \
        {input.r1} \
        {input.r2} \
        -q 20 \
        --length 15 \
        --stringency 3 \
        -e 0.1 \
        &> {output.log}
        """


## 6. bowtie2


rule bowtie2:
    input:
        r1="trimmedTrim/{sample}.1_val_1.fq.gz",
        r2="trimmedTrim/{sample}.2_val_2.fq.gz",
        idx=expand("/gss1/home/hzhao/lncRNA_analysis/2_reference/OSA_rRNA.{n}.bt2", n=[1, 2, 3, 4, "rev.1", "rev.2"])
    output:
        unpaired1="bowtie2/{sample}_clean.1.fastq.gz",
        unpaired2="bowtie2/{sample}_clean.2.fastq.gz"
    params:
        temp_sam=temp("bowtie2/{sample}_temp.sam")
    resources:
        mem_mb=10240
    log:
        "log/bowtie2/{sample}.log"
    threads: 1
    run:
        from os import path, rename
        from snakemake.shell import shell

        # 获取输出文件的目录
        output_dir = path.dirname(output.unpaired1)

        # 获取索引的公共前缀
        index_prefix = path.commonprefix(input.idx).rstrip('.')

        # 构建 bowtie2 命令
        cmd = (
            f"mkdir -p {output_dir} && "
            f"source /gss1/env/bowtie2.env && "
            f"bowtie2 --very-sensitive-local --no-unal --no-head -I 1 -X 1000 "
            f"-p {threads} -x {index_prefix} -1 {input.r1} -2 {input.r2} "
            f"--un-conc-gz {output_dir}/un-conc-mate "
            f"-S {params.temp_sam} 2> {log[0]}"
        )

        # 执行命令
        shell(cmd)

        # 重命名 Bowtie2 生成的文件以匹配 output 字段
        rename(f"{output_dir}/un-conc-mate.1", output.unpaired1)
        rename(f"{output_dir}/un-conc-mate.2", output.unpaired2)





# 7. hisat2
rule hisat2:
    input:
        r1="bowtie2/{sample}_clean.1.fastq.gz",
        r2="bowtie2/{sample}_clean.2.fastq.gz",
        idx=expand(
            "/gss1/home/hzhao/temp/data/genome/lambda.{i}.ht2",
            i=range(1,9)
        )
    output:
        bam="hisat2/{sample}_sorted.bam"
    log:
        "log/hisat2/{sample}.log"
    threads: 1

    shell:
        """
        idx_prefix=$(python -c 'import os; print(os.path.commonprefix(["{input.idx[0]}"]).rstrip(".1.ht2"))')

        hisat2 \
        --threads {threads} \
        --rna-strandness RF \
        -x $idx_prefix \
        -1 {input.r1} \
        -2 {input.r2} \
        | samtools view -Sbh - \
        | samtools sort -O bam -@ {threads} -o {output.bam} -
        2> {log}
        """
```

#### 4.5.5 stringtie

rule stringtie:
    input:
        bam="hisat2/{sample}_sorted.bam"
    output:
        gtf="stringtie/{sample}.gtf"
    params:
        threads=28
    shell:
        """
        stringtie \
        -p {params.threads} -v \
        --rf \
        -o {output.gtf} \
        {input.bam}
        """


#### 4.5.6. taco_run

rule taco_run:
    input:
        gtf=expand("stringtie/pe/{sample}.gtf", sample=SAMPLES)
    output:
        directory("taco_run/pe/")
    params:
        threads=8
    conda:
        "/gss1/home/hzhao/20230411/2023-09-17_translatome/py2_environment.yaml"
    shell:
        """
        taco_run -p {params.threads} \
        -o {output} \
        {input.gtf}
```
## snakemake
snakemake --latency-wait 60 -ps snakemake.py --cores 22

